import java.util.Arrays;
import java.util.Comparator;
import java.util.Random;

public class Mainowa {

	static int max = 300; //liczba cylindrow
	static int liczbaAplikacji = 100; //liczba zgloszen do dysku
	static int liczbaSekwencji = 1; //liczba powtorzeń dla maina
	static int maxCzasZgloszenia = 50;  // maksymalny czas zgloszenia 
	static int maxDeadline = 200; // maksymalny deadline dla realTimeApp
	static int pozGlowicy = 0;
	static int realTimeApp = 0; 

	private static Aplikacja[] stworz() {
		Aplikacja[] tablica = new Aplikacja [liczbaAplikacji];
		Random rand = new Random();
		
		for (int i = 0; i < liczbaAplikacji; i++) {
			int deadline = 0;
			int czasZgloszenia = rand.nextInt (maxCzasZgloszenia);
			
			if (rand.nextDouble() > 1.0) {
				deadline += rand.nextInt (maxDeadline) + czasZgloszenia;
				realTimeApp++;
			}
			tablica[i] = new Aplikacja (czasZgloszenia, rand.nextInt(max), deadline);
		}
		Arrays.sort (tablica, ArriveTimeComp);
		return tablica;
	}

	static Aplikacja[] kopiuj (Aplikacja[] tablica) {
		Aplikacja[] wynik = new Aplikacja [tablica.length];
		for (int x = 0 ; x < wynik.length ; x++) {
			wynik[x] = tablica[x].clone();
		}
		return wynik;
	}

	public static Comparator <Aplikacja> ArriveTimeComp = new Comparator <Aplikacja> () {
		public int compare (Aplikacja app1, Aplikacja app2) {
			if (app1.getczasZgloszenia() < app2.getczasZgloszenia()) {
				return -1;
			}
			else if (app1.getczasZgloszenia() > app2.getczasZgloszenia()) {
				return 1;
			}
			else {
				return 0;
			}
		}
	};
	
	public static void main (String[] args) {
		
		FCFS fcfs = new FCFS (pozGlowicy);
		SSTF sstf = new SSTF (pozGlowicy);
		SCAN scan = new SCAN (pozGlowicy);
		CSCAN cscan = new CSCAN (pozGlowicy);
		
		for (int i = 0 ; i < liczbaSekwencji ; i++) {
			Aplikacja[] app = stworz();
			Random rand = new Random();
			pozGlowicy = rand.nextInt (max + 1);
			
			FCFS.glowica = pozGlowicy;
			fcfs.dzialanie (kopiuj (app));
			
			SSTF.glowica = pozGlowicy;
			sstf.dzialanie (kopiuj (app));
			
			SCAN.glowica = pozGlowicy;
			scan.dzialanie (kopiuj (app));
			
			CSCAN.glowica = pozGlowicy;
			cscan.dzialanie (kopiuj (app));
		}
		
		System.out.println ("Srednia suma przemieszen glowicy dysku: ");
		System.out.println ("FCFS - " + fcfs.movement / liczbaSekwencji);
		System.out.println ("SSTF - " + sstf.movement / liczbaSekwencji);
		System.out.println ("SCAN - " + scan.movement / liczbaSekwencji);
		System.out.println ("C-SCAN - " + cscan.movement / liczbaSekwencji);
		System.out.println ("Srednia liczba zgloszen real time: " + (double) realTimeApp / liczbaSekwencji);
	}
}


import java.util.Comparator;

public class Aplikacja implements Cloneable {
	
	private int czasZgloszenia;
	private int getNr;
	private int deadline;

	Aplikacja (int czasZgloszenia, int number, int deadline){
		this.czasZgloszenia = czasZgloszenia;
		this.getNr = number;
		this.deadline = deadline; 
	}
	
	public int getNr(){
		return getNr;
	}
	
	public int getczasZgloszenia(){
		return czasZgloszenia;
	}
	
	public int getDeadline(){
		return deadline;
	}
	 
	protected Aplikacja clone(){
		return new Aplikacja (czasZgloszenia, getNr, deadline);
	}
	
	public static Comparator <Aplikacja> DeadlineComp = new Comparator <Aplikacja> () {
		public int compare (Aplikacja app1, Aplikacja app2) {
			if (app1.getczasZgloszenia() < app2.getczasZgloszenia()) {
				return -1;
			}
			else if (app1.getczasZgloszenia() > app2.getczasZgloszenia()) {
				return 1;
			}
			else {
				return 0;
			}
		}
	};
}


import java.util.ArrayDeque;
import java.util.PriorityQueue;

public class FCFS {
	
	static int glowica;
	long movement;
	int notServedApp;
	
	FCFS (int glowica){
		FCFS.glowica = glowica;
		movement = 0;
		notServedApp = 0;
	}

	public void dzialanie (Aplikacja[] array) {
		
		int time = 0;
		int i = 0;
		ArrayDeque <Aplikacja> queue = new ArrayDeque <Aplikacja>();
		PriorityQueue <Aplikacja> deadlineQueue = new PriorityQueue <Aplikacja> (1, Aplikacja.DeadlineComp);

		while (i < array.length || !queue.isEmpty()){
			while (i < array.length && time == array[i].getczasZgloszenia()){
				if (array[i].getDeadline() != 0){
					deadlineQueue.add (array[i]);
				}	
				else{
					queue.add (array[i]);
				}
				i++;
			}
			if(!deadlineQueue.isEmpty()){
				while(!deadlineQueue.isEmpty()){
					if(Math.abs(deadlineQueue.peek().getNr() - glowica) + time > deadlineQueue.peek().getDeadline()){
						notServedApp++;
						deadlineQueue.poll();
						continue;
					}
					Aplikacja app = deadlineQueue.peek();
					if (app.getNr()> glowica){
						glowica++;
						movement++;
					}
					else if (app.getNr() < glowica){
						glowica--;
						movement++;
					}
					if (app.getNr() == glowica){
						deadlineQueue.remove();
					}
				}
			}
			else if (!queue.isEmpty()){
				Aplikacja app = queue.getFirst();
				if (app.getNr() > glowica) {
					glowica++;
					movement++;
				} else if (app.getNr() < glowica){
					glowica--;
					movement++;
				}
				if (app.getNr() == glowica){
					queue.removeFirst();
				}
			}
			time++;
		}
	}
}


import java.util.Comparator;
import java.util.PriorityQueue;

public class SSTF {
	
	static int glowica;
	long movement;
	int notServedApp;
	
	SSTF (int glowica){
		SSTF.glowica = glowica;
		movement = 0;
		notServedApp = 0;
	}

	public void dzialanie (Aplikacja[] array) {
		
		int time = 0;
		int i = 0;
		PriorityQueue<Aplikacja> queue = new PriorityQueue<Aplikacja>(1, DistanceComp);
		PriorityQueue<Aplikacja> deadlineQueue = new PriorityQueue<Aplikacja>(1, Aplikacja.DeadlineComp);
		
		while (i < array.length || !queue.isEmpty()) {
			while (i < array.length && time == array[i].getczasZgloszenia()) {
				if (array[i].getDeadline() != 0){
					deadlineQueue.add(array[i]);
				}	
				else{
					queue.add(array[i]);
				}
				i++;
			}
			if(!deadlineQueue.isEmpty()){
				while(!deadlineQueue.isEmpty()){
					if(Math.abs(deadlineQueue.peek().getNr() - glowica) + time > deadlineQueue.peek().getDeadline()){
						notServedApp++;
						deadlineQueue.poll();
						continue;
					}
					Aplikacja app = deadlineQueue.peek();
					if (app.getNr() > glowica) {
						glowica++;
						movement++;
					} else if (app.getNr() < glowica){
						glowica--;
						movement++;
					}
					if (app.getNr() == glowica){
						deadlineQueue.remove();
					}
				}
			}
			else if (!queue.isEmpty()){
				Aplikacja app = queue.peek();
				if (app.getNr() > glowica){
					glowica++;
					movement++;
				} else if (app.getNr() < glowica){
					glowica--;
					movement++;
				}
				if (app.getNr() == glowica){
					queue.remove();
				}
			}
			time++;
		}		
	}
	
	public static Comparator<Aplikacja> DistanceComp = new Comparator<Aplikacja>(){
		public int compare(Aplikacja a1, Aplikacja a2){
			int dis1 = Math.abs(a1.getNr() - glowica);
			int dis2 = Math.abs(a2.getNr() - glowica);
			return dis1 < dis2 ? -1 : dis1 > dis2 ? 1 : 0;
		}
	};
	
}


import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.PriorityQueue;

public class SCAN {
	
	static int glowica;
	long movement;
	int notServedApp;
	
	SCAN (int glowica){
		SCAN.glowica = glowica;
		movement = 0;
		notServedApp = 0;
	}
	
	public void dzialanie (Aplikacja[] array){
		
		int time = 0;
		int i = 0;
		int direction = 1;
		ArrayDeque<Aplikacja> queue = new ArrayDeque<Aplikacja>();
		PriorityQueue<Aplikacja> deadlineQueue = new PriorityQueue<Aplikacja>(1, Aplikacja.DeadlineComp);
		
		while (i < array.length || !queue.isEmpty()) {
			while (i < array.length && time == array[i].getczasZgloszenia()) {
				if (array[i].getDeadline() != 0){
					deadlineQueue.add(array[i]);
				}	
				else{
					queue.add(array[i]);
				}
				i++;
			}
			if(!deadlineQueue.isEmpty()){
				while(!deadlineQueue.isEmpty()){
					if((Math.abs(deadlineQueue.peek().getNr() - glowica) + time) > deadlineQueue.peek().getDeadline()){
						notServedApp++;
						deadlineQueue.poll();
						continue;
					}
					Aplikacja app = deadlineQueue.peek();
					if (app.getNr() > glowica){
						glowica++;
						movement++;
					}
					else if (app.getNr() < glowica){
						glowica--;
						movement++;
					}
					if (app.getNr() == glowica){
					deadlineQueue.remove();
					}
				}
			}
			else if (!queue.isEmpty()){
				Iterator<Aplikacja> it = queue.iterator();
				while(it.hasNext()){
					Aplikacja app = it.next();
					if(app.getNr() == glowica){
						System.out.println("zgł"+glowica);
						it.remove();
					}
				}

				if(glowica == Mainowa.max - 1){
					direction = -1;
				}
				if(glowica == 0){
					direction = 1 ;
				}
				glowica += direction;
				movement++;
			}
			time++;
			System.out.println(glowica);
		}
	}

}


import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.PriorityQueue;

public class CSCAN {
	
	static int glowica;
	long movement;
	int notServedApp;
	
	CSCAN(int glowica){
		CSCAN.glowica = glowica;
		movement = 0;
		notServedApp = 0;
	}
	
	public void dzialanie (Aplikacja[] array){
		int time = 0;
		int i = 0;
		int direction = 1;
		PriorityQueue<Aplikacja> deadlineQueue = new PriorityQueue<Aplikacja>(1, Aplikacja.DeadlineComp);
		ArrayDeque<Aplikacja> queue = new ArrayDeque<Aplikacja>();

		while (i < array.length || !queue.isEmpty()){
			while (i < array.length && time == array[i].getczasZgloszenia()){
				if (array[i].getDeadline() != 0){
					deadlineQueue.add(array[i]);
				}	
				else{
					queue.add(array[i]);
				}
				i++;
			}
			if(!deadlineQueue.isEmpty()){
				while(!deadlineQueue.isEmpty()){
					if(Math.abs(deadlineQueue.peek().getNr() - glowica) + time > deadlineQueue.peek().getDeadline()){
						notServedApp++;
						deadlineQueue.poll();
						continue;
					}
					Aplikacja app = deadlineQueue.peek();
					if (app.getNr() > glowica){
						glowica++;
						movement++;
					}
					else if (app.getNr() < glowica){
						glowica--;
						movement++;
					}
					if (app.getNr() == glowica){
						deadlineQueue.remove();
					}
				}
			}
			else if (!queue.isEmpty()) {
				Iterator<Aplikacja> it = queue.iterator();
				while(it.hasNext()){
					Aplikacja app = it.next();
					if(app.getNr() == glowica){
						it.remove();
					}
				}
				if(glowica == Mainowa.max - 1){
					glowica = 0;
					movement += Mainowa.max;
				}
				else{
					glowica += direction;
					//movement++;
				}
			}
			time++;
		}
	}
}
